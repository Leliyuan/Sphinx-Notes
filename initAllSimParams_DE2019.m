% Copyright 2020 Delft University of Technology
%
% Licensed under the Apache License, Version 2.0 (the "License");
% you may not use this file except in compliance with the License.
% You may obtain a copy of the License at
%
%      http://www.apache.org/licenses/LICENSE-2.0
%
% Unless required by applicable law or agreed to in writing, software
% distributed under the License is distributed on an "AS IS" BASIS,
% WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
% See the License for the specific language governing permissions and
% limitations under the License. 

function [base_windspeed, constr, ENVMT, Lbooth, ...
    loiterStates, DE2019, simInit, T, winchParameter,params] = initAllSimParams_DE2019()
%initAllSimParams_DE2019 - Initialise simulation parameters for the complete system
%
% Syntax:  [act, base_windspeed, constr, ENVMT, Lbooth, ...
%           loiterStates, DE2019, simInit, T, winchParameter,params] = initAllSimParams_Dylan_v2()
%
% Inputs:
%    input1 - None
%
% Outputs:
%    act            - Actuator, aileron elevator and rudder data
%    base_windspeed - 6m altitude constant ground wind speed
%    constr         - Aircraft manoeuvre and winch constraints
%    ENVMT          - Environmental parameters
%    Lbooth         - Flight path parameters
%    loiterStates   - Initial loiter parameters (power cycle initialisation)
%    DE2019         - Aircraft parameters
%    simInit        - Simulation initialisation parameters
%    T              - Tether dimensions and material properties
%    winchParameter - Winch dynamic parameters
%    params         - Flight/Winch controller parameters
%
% Example: 
%    [act, base_windspeed, constr, ENVMT, Lbooth, ...
%    loiterStates, DE2019, simInit, T, winchParameter,params] = initAllSimParams_Dylan_v2()
%
% Other m-files required: transformFromWtoO.m, transformFromOtoW.m, 
%               getPointOnBooth 
%
% Subfunctions: none
%
% MAT-files required:   DE2019_params.mat
%                       Control_allocation_V60.mat
%
% Author: Dylan Eijkelhof, M.Sc.
% Delft University of Technology
% email address: d.eijkelhof@tudelft.nl  
% December 2019; Last revision: 09-Oct-2020

%------------- BEGIN CODE --------------
%% Obtain large-scale wing params
load('DE2019_params.mat','DE2019','constraintOut');

%% Environment struct
ENVMT.g= 9.8066;
ENVMT.rhos= 1.2250;
ENVMT.windDirection_rad= 3.1416;

%% Winspeed measured at 6m altitude
base_windspeed = 12; %

%% Initialization parameters
simInit.TSIM = 1200; % Maximum simulation time 
simInit.dt= 2.5000e-04; % Fixed-step size

simInit.FtLoggingTs = 0.01; %Tether force logging sample time
simInit.vWLoggingTs = 0.01; %Wind speed logging sample time
simInit.CteLoggingTs = 0.2; %cross-track error logging sample time
simInit.AttLoggingTs = 0.5; %Attitude (alpha, beta) logging sample time
simInit.GSLoggingTs = 0.5;  %Glide slope error logging sample time
simInit.PLoggingTs = 0.01; %Power logging sample time, others use the same
simInit.Ts_power_conv_check = 0.1; %Power convergence check sample time

% Aircraft position and attitude
pos_init_W =  [200;75;200];
simInit.pos_O_init = transformFromWtoO(ENVMT.windDirection_rad, pos_init_W)'; %[-200,0,-250];
simInit.vel_B_init= [50;0;0];
psi_init = ENVMT.windDirection_rad+pi;
if psi_init > pi
    psi_init = ENVMT.windDirection_rad-pi;
end
simInit.eta_init = [0;0;psi_init];% Theta = theta_,
simInit.tether_inital_lenght = norm( simInit.pos_O_init)+1;
simInit.pos_W_init = transformFromOtoW(ENVMT.windDirection_rad, simInit.pos_O_init');
simInit.long_init = atan2( simInit.pos_W_init(2), simInit.pos_W_init(1) );
simInit.lat_init = asin( simInit.pos_W_init(3)/norm(simInit.pos_W_init) );

%% Constrainst
constr.mu_a_max= deg2rad(60);
constr.mu_a_min= -constr.mu_a_max;

alphawing = deg2rad(DE2019.initAircraft.alpha)';
liftwing = DE2019.initAircraft.wing_cL_Static';
[~, ind] = unique(liftwing);

constr.alpha_a_max= alphawing(ind(end));
constr.alpha_a_min= deg2rad(-15);%alphawing(ind(2)-1);

constr.mu_a_max_retraction= 0.7854;
constr.gamma_min_retraction = -20; %degrees
constr.gamma_max_retraction = 10; %degrees
% Maximum lift generated by aircraft
constr.max_lift= constraintOut.buckling;

constr.max_delta_mu= 0.1745;
constr.mu_k_max= 1.0472;
constr.max_rates_B = deg2rad(50);

% Maximum tether force 
constr.F_T_max= 0.9*constr.max_lift;

constr.Va_min= 15;
constr.max_CL= 2.5;
constr.min_CL= -2.5;
constr.min_altitude_pc= 100;
constr.winchParameter.a_max= 5;
constr.winchParameter.a_min= -5;  % winch acceleration limits 
constr.winchParameter.v_max= 25; % winch reelout speed limits.
constr.winchParameter.v_min=-25;

%% Tether parameters
SFt = 1.5; % Safety Factor
sigmat = 3.6*10^9;% tensile strength Dyneema 1.15 in thesis but 3.6 kitepower
DE2019.d_tether = sqrt(constr.F_T_max/(sigmat/(4/pi*SFt)));

rho_dyneema = 970; %kg/m3
DE2019.rho_tether = rho_dyneema * (pi/4*DE2019.d_tether^2); %kg/m
DE2019.Cd_tether = 1.2000;
DE2019.rho_air = 1.2250;

% Uwes paper
T.c0 =  614600 ;
T.d0 = 473;
T.rho_t = DE2019.rho_tether;
T.d_tether = DE2019.d_tether;
T.CD_tether = DE2019.Cd_tether;
T.np = 5; % Needs convergence study

T.l0 = simInit.tether_inital_lenght/(T.np+1);
simInit.pos_p_init = [];
e_t = simInit.pos_W_init/norm(simInit.pos_W_init);
for p = 1 : T.np
    simInit.pos_p_init = [simInit.pos_p_init; p*e_t*T.l0];
end
simInit.vel_p_init = 0 * simInit.pos_p_init;

%% Winch parameters
%TU Delft parameters from a paper (need to find it again)
simInit.lj_dot_init = 0; %initial reel-out speed
winchParameter.radius = 0.4;
winchParameter.inertia = 0.656;
winchParameter.friction = 0.799; %dynamic friction
simInit.winch_angle_init = simInit.tether_inital_lenght/winchParameter.radius;

%% Flightpath parameter 
params.a_booth=0.85;
params.b_booth=250;
params.phi0_booth =0.53815;

params.l_tether_max=1400;
params.l_tether_min=250;

params.initial_path_elevation =70;
params.w0_decrease_init_phi0  =0.2;
params.transition_phi =42.9883; % set the elevation of the transition figure

%% Tetherforce set point
params.F_t_traction_set=890773.2773;
params.F_t_retraction_set=49947.3262;
loiterStates.Ft_set_loiter=166491.0873; %During initialisation too

params.ft_smooth_1= 2.5000e-04; % Tether set point slow increase parameter (state machine)
params.ft_smooth_2=2.2156e-05; % Tether set point slow increase parameter (state machine)
params.ft_smooth_3= 0.01000; % Tether set point slow increase parameter (state machine)

%% Control parameters

params.w0_chi_retraction_max= 1.27538229277844;
params.w0_gamma_retraction_max= 1.39070944789847;

params.Kp_chi_k_traction=4.1309;%1;
params.Kp_gamma_k_traction =2.8286;

params.Kp_chi_retraction=8.7626;%2.05590080982183;
params.Kp_gamma_retraction =4.825;
params.Ki_chi_retraction= 0.588995468858806;
params.Ki_gamma_retraction= 0;

params.Kp_mu=4.4495;
params.Kp_alpha=9.9514;
params.Kp_beta= .1;
params.Ki_mu= 0; % forced to zero in sim
params.Ki_alpha= 0.1000;
params.Ki_beta= 0; % forced to zero in sim

params.kp_winch=1.2527;
params.ki_winch=0;

params.crosstrackerror_condition= 10;
params.w0SpeedControl= 0.5000;
params.kp_speed_control= 5;
params.ki_speed_control= 5;


params.r_retraction= 100;
params.kp_delta_course= 0.0500;
params.kp_delta_gamma= 0.0600;
params.v_k_min= 10;
params.dvk= 5;
params.v_k_speed_by_pitch= 20;
params.kp_speed_by_pitch= 1;
params.delta0_offset= 0.1500;
params.delta0_slope= 0;

params.w0_mu= 6;
params.w0_alpha= 6;

%% Parameters of the loitering state (initialisation phase)
loiterStates.Va_set= 61.5760820248188;
loiterStates.kp_h= 0.1000;

loiterStates.R= 100;
loiterStates.pos_OLoiter_W= [100;0;200];
loiterStates.validTransReg_start= -3.1416; %-pi
loiterStates.validTransReg_end= -1.3963; %-11*pi/25


%% Lemniscate parameter initialisation, no need to be changed
Lbooth.a= 0; %initialisation of variable
Lbooth.b= 0; %initialisation of variable
Lbooth.phi0= 0; %initialisation of variable
Lbooth.init_sol= 3.9270; %5*pi/4
%------------- END CODE --------------
end